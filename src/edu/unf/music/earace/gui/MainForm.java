/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SingsGUI.java
 *
 * Created on Apr 18, 2012, 12:38:00 PM
 */
package edu.unf.music.earace.gui;

import edu.unf.music.earace.SongData;
import edu.unf.music.earace.Util;
import edu.unf.music.earace.sound.AudioManager;
import edu.unf.music.earace.yin.PitchHandler;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author Brad
 */
public class MainForm extends javax.swing.JFrame 
{
    public MainForm() 
    {
        initComponents();
        
        // Load some data into the song list
        JList list = (JList) this.listSongs;
        list.setListData(SongData.SONGS);
    }

    /** 
     * This method is called from within the constructor to
     * initialize the form. WARNING: Do NOT modify this code. The content 
     * of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        songListScrollPane = new javax.swing.JScrollPane();
        listSongs = new javax.swing.JList();
        btnRecord = new javax.swing.JButton();
        btnPlayRef = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelMusic = new javax.swing.JPanel();
        imgSheetMusic = new org.jdesktop.swingx.JXImageView();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCalcPitches = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRefPitches = new javax.swing.JTable();
        lblSongList = new javax.swing.JLabel();
        btnAnalyze = new javax.swing.JButton();
        btnPlayRecorded = new javax.swing.JButton();
        btnGetScore = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ear Ace Sight Reading");

        listSongs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        listSongs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSongsMouseClicked(evt);
            }
        });
        songListScrollPane.setViewportView(listSongs);

        btnRecord.setBackground(new java.awt.Color(255, 51, 0));
        btnRecord.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRecord.setText("Record");
        btnRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRecordMouseClicked(evt);
            }
        });
        btnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordActionPerformed(evt);
            }
        });

        btnPlayRef.setBackground(new java.awt.Color(0, 51, 204));
        btnPlayRef.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPlayRef.setForeground(new java.awt.Color(255, 255, 255));
        btnPlayRef.setText("Play Reference File");
        btnPlayRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayRefActionPerformed(evt);
            }
        });

        panelMusic.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imgSheetMusic.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                imgMouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout imgSheetMusicLayout = new javax.swing.GroupLayout(imgSheetMusic);
        imgSheetMusic.setLayout(imgSheetMusicLayout);
        imgSheetMusicLayout.setHorizontalGroup(
            imgSheetMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 805, Short.MAX_VALUE)
        );
        imgSheetMusicLayout.setVerticalGroup(
            imgSheetMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelMusicLayout = new javax.swing.GroupLayout(panelMusic);
        panelMusic.setLayout(panelMusicLayout);
        panelMusicLayout.setHorizontalGroup(
            panelMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMusicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgSheetMusic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelMusicLayout.setVerticalGroup(
            panelMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMusicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgSheetMusic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sheet Music", panelMusic);

        tableCalcPitches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Time", "Frequency", "Midi Note"
            }
        ));
        jScrollPane1.setViewportView(tableCalcPitches);

        jTabbedPane1.addTab("Calculated Pitch Results", jScrollPane1);

        tableRefPitches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Time", "Frequency", "Midi Note"
            }
        ));
        jScrollPane2.setViewportView(tableRefPitches);

        jTabbedPane1.addTab("Reference Pitch Results", jScrollPane2);

        lblSongList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSongList.setText("Available Songs");

        btnAnalyze.setBackground(new java.awt.Color(102, 255, 102));
        btnAnalyze.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAnalyze.setText("Analyze");
        btnAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalyzeActionPerformed(evt);
            }
        });

        btnPlayRecorded.setBackground(new java.awt.Color(0, 51, 204));
        btnPlayRecorded.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPlayRecorded.setForeground(new java.awt.Color(255, 255, 255));
        btnPlayRecorded.setText("Play Recorded File");
        btnPlayRecorded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayRecordedActionPerformed(evt);
            }
        });

        btnGetScore.setBackground(new java.awt.Color(0, 204, 204));
        btnGetScore.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnGetScore.setText("Get Your Score!");
        btnGetScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetScoreActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(songListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(lblSongList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnalyze, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGetScore, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPlayRecorded, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPlayRef, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAnalyze, btnGetScore, btnPlayRecorded, btnPlayRef, btnRecord});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSongList, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(songListScrollPane))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAnalyze, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGetScore, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlayRecorded, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPlayRef))))
                .addGap(19, 19, 19))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnPlayRecorded, btnPlayRef});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listSongsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSongsMouseClicked
        loadSheetMusic();
    }//GEN-LAST:event_listSongsMouseClicked

    private void btnRecordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRecordMouseClicked
    }//GEN-LAST:event_btnRecordMouseClicked

    private void btnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordActionPerformed
        AudioForm audioFrm = new AudioForm();
        Util.centerWindow(audioFrm);
        audioFrm.setVisible(true);
    }//GEN-LAST:event_btnRecordActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuExitActionPerformed
    {//GEN-HEADEREND:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void btnPlayRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayRefActionPerformed
        playAudioFile(true);
    }//GEN-LAST:event_btnPlayRefActionPerformed

    private void btnPlayRecordedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayRecordedActionPerformed
        playAudioFile(false);
    }//GEN-LAST:event_btnPlayRecordedActionPerformed

    private void btnAnalyzeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAnalyzeActionPerformed
    {//GEN-HEADEREND:event_btnAnalyzeActionPerformed
        analyzeRecordedFile();
                
        analyzeReferenceFile();
    }//GEN-LAST:event_btnAnalyzeActionPerformed

    private void imgMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imgMouseWheelMoved
    {//GEN-HEADEREND:event_imgMouseWheelMoved
        int notches = evt.getWheelRotation();
        if (notches < 0) 
        {
            this.imgSheetMusic.setScale(this.imgSheetMusic.getScale() + 0.25);
        } 
        else 
        {
            this.imgSheetMusic.setScale(this.imgSheetMusic.getScale() - 0.25);
        }
    }//GEN-LAST:event_imgMouseWheelMoved

    private void btnGetScoreActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnGetScoreActionPerformed
    {//GEN-HEADEREND:event_btnGetScoreActionPerformed
        comparePitches();
    }//GEN-LAST:event_btnGetScoreActionPerformed

    private void loadSheetMusic()
    {
        JList list = (JList) this.listSongs;
        int selected = list.getSelectedIndex();
        
        try 
        {
            this.imgSheetMusic.setImage(new File(SongData.MUSIC[selected]));
        } // end try
        catch (IOException ex) 
        {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void analyzeReferenceFile()
    {
        JList list = (JList) this.listSongs;
        int selected = list.getSelectedIndex();
        
        if (selected > -1)
        {
            PitchHandler handler = new PitchHandler(
                    SongData.AUDIO[selected], 
                    this.tableRefPitches);

            Thread thread = new Thread(handler);
            thread.start();
        } // end if        
    } // end analyzeAudioFile()
    
    private void analyzeRecordedFile()
    {
        String recFile = "audio/recorded.wav";
        
        if (Util.fileExists(recFile))
        {
            PitchHandler handler = new PitchHandler(
                    recFile, 
                    this.tableCalcPitches);
            
            Thread thread = new Thread(handler);
            thread.start();
        }
    }
    
    private void comparePitches()
    {
        double goodNotes = 0.0;
        double correct = 0.0;
        
        // Get the rows from the reference analysis
        TableModel modRef = this.tableRefPitches.getModel();
        
        // Get the rows from the recorded analysis
        TableModel modCalc = this.tableCalcPitches.getModel();
        
        Util.log("modRef rowCount: " + modRef.getRowCount());
        Util.log("modCalc rowCount: " + modCalc.getRowCount());
        
        // Now we need to compare values between the two tables
        if (modRef.getRowCount() > 0 && modCalc.getRowCount() > 0)
        {
            for (int i = 0; i < modRef.getRowCount(); i++)
            {
                if (i < modCalc.getRowCount())
                {
                    int pitchRef = Integer.parseInt(modRef.getValueAt(i, 2).toString());
                    int pitchCalc = Integer.parseInt(modCalc.getValueAt(i, 2).toString());

                    Util.log("PitchRef...: " + pitchRef);
                    goodNotes++;

                    Util.log("PitchCalc...: " + pitchCalc);

                    if (pitchCalc == pitchRef)
                        correct++;
                }
            }
            
            double result = (correct/goodNotes) * 100;

            JOptionPane.showMessageDialog(null, "Your percentile is " + result, "Your Score", 
                JOptionPane.DEFAULT_OPTION);
        }
    }
    
    private void playAudioFile(boolean bReferenceAudio)
    {
        String audioFile = "";
        
        if (bReferenceAudio)
        {
            JList list = (JList) this.listSongs;
            int selected = list.getSelectedIndex();
            audioFile = SongData.AUDIO[selected];
        }
        else
        {
            audioFile = "audio/recorded.wav";
        }
        
        if (Util.fileExists(audioFile))
        {
            AudioManager mgr = new AudioManager();
            mgr.playAudio(audioFile);
        }
        else
        {
            Util.showErrorBox("Audio file '" + 
                    audioFile + "' not found!", "File Not Found");
        }
    } // end playRefAudioFile()
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalyze;
    private javax.swing.JButton btnGetScore;
    private javax.swing.JButton btnPlayRecorded;
    private javax.swing.JButton btnPlayRef;
    private javax.swing.JButton btnRecord;
    private org.jdesktop.swingx.JXImageView imgSheetMusic;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblSongList;
    private javax.swing.JList listSongs;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JPanel panelMusic;
    private javax.swing.JScrollPane songListScrollPane;
    private javax.swing.JTable tableCalcPitches;
    private javax.swing.JTable tableRefPitches;
    // End of variables declaration//GEN-END:variables
}